package com.kma.shop.utils.generatedata;

import com.kma.shop.entity.OrderEntity;
import com.kma.shop.entity.ReviewEntity;
import com.kma.shop.mapping.ReviewMapping;
import com.kma.shop.repo.OrderRepo;
import com.kma.shop.repo.ReviewRepo;
import com.kma.shop.service.interfaces.ReviewService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

@Component
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class GenerateReviewData {
    ReviewRepo reviewRepo;
    OrderRepo orderRepo;
    ReviewMapping reviewMapping;
    Random random = new Random();

    // Realistic review comments for different product categories
    private final List<String> positiveComments = Arrays.asList(
        "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng r·∫•t t·ªët, ƒë√≥ng g√≥i c·∫©n th·∫≠n!",
        "Giao h√†ng nhanh, s·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£. R·∫•t h√†i l√≤ng!",
        "Ch·∫•t l∆∞·ª£ng v∆∞·ª£t mong ƒë·ª£i, gi√° c·∫£ h·ª£p l√Ω. S·∫Ω mua l·∫°i!",
        "S·∫£n ph·∫©m ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, thi·∫øt k·∫ø ƒë·∫πp m·∫Øt.",
        "D·ªãch v·ª• kh√°ch h√†ng t·ªët, s·∫£n ph·∫©m ƒë√°ng tin c·∫≠y.",
        "ƒê√£ s·ª≠ d·ª•ng ƒë∆∞·ª£c 2 th√°ng, hi·ªáu su·∫•t r·∫•t ·ªïn ƒë·ªãnh.",
        "Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, d·ªÖ s·ª≠ d·ª•ng, ph√π h·ª£p v·ªõi nhu c·∫ßu.",
        "Ch·∫•t l∆∞·ª£ng build t·ªët, v·∫≠t li·ªáu cao c·∫•p.",
        "Hi·ªáu nƒÉng v∆∞·ª£t tr·ªôi so v·ªõi gi√° ti·ªÅn, ƒë√°ng mua!",
        "S·∫£n ph·∫©m ch√≠nh h√£ng, b·∫£o h√†nh ƒë·∫ßy ƒë·ªß, y√™n t√¢m s·ª≠ d·ª•ng."
    );

    private final List<String> neutralComments = Arrays.asList(
        "S·∫£n ph·∫©m t·∫°m ƒë∆∞·ª£c, ƒë√°p ·ª©ng c∆° b·∫£n nhu c·∫ßu s·ª≠ d·ª•ng.",
        "Ch·∫•t l∆∞·ª£ng ·ªïn, nh∆∞ng c√≥ th·ªÉ c·∫£i thi·ªán th√™m m·ªôt s·ªë chi ti·∫øt.",
        "Giao h√†ng ƒë√∫ng h·∫πn, s·∫£n ph·∫©m ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.",
        "Thi·∫øt k·∫ø ƒë∆°n gi·∫£n, d·ªÖ s·ª≠ d·ª•ng cho ng∆∞·ªùi m·ªõi.",
        "Gi√° c·∫£ ph√π h·ª£p v·ªõi ch·∫•t l∆∞·ª£ng, kh√¥ng qu√° xu·∫•t s·∫Øc.",
        "S·∫£n ph·∫©m ƒë√∫ng nh∆∞ qu·∫£ng c√°o, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát.",
        "Ch·∫•t l∆∞·ª£ng trung b√¨nh, ph√π h·ª£p v·ªõi m·ª©c gi√°.",
        "D·ªÖ l·∫Øp ƒë·∫∑t v√† s·ª≠ d·ª•ng, ph√π h·ª£p cho gia ƒë√¨nh.",
        "S·∫£n ph·∫©m ·ªïn ƒë·ªãnh, kh√¥ng g·∫∑p v·∫•n ƒë·ªÅ g√¨ l·ªõn.",
        "ƒê√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh ch√≥ng."
    );

    private final List<String> negativeComments = Arrays.asList(
        "S·∫£n ph·∫©m c√≥ v·∫•n ƒë·ªÅ v·ªÅ ch·∫•t l∆∞·ª£ng, kh√¥ng nh∆∞ mong ƒë·ª£i.",
        "Giao h√†ng ch·∫≠m, s·∫£n ph·∫©m c√≥ d·∫•u hi·ªáu ƒë√£ qua s·ª≠ d·ª•ng.",
        "Thi·∫øt k·∫ø kh√¥ng ti·ªán d·ª•ng, kh√≥ l·∫Øp ƒë·∫∑t.",
        "Hi·ªáu nƒÉng k√©m h∆°n so v·ªõi m√¥ t·∫£, th·∫•t v·ªçng.",
        "Gi√° cao nh∆∞ng ch·∫•t l∆∞·ª£ng kh√¥ng t∆∞∆°ng x·ª©ng.",
        "S·∫£n ph·∫©m b·ªã l·ªói ngay sau khi m·ªü h·ªôp.",
        "D·ªãch v·ª• kh√°ch h√†ng ch·∫≠m tr·ªÖ, kh√¥ng h√†i l√≤ng.",
        "Thi·∫øt k·∫ø c·ªìng k·ªÅnh, kh√¥ng ph√π h·ª£p v·ªõi kh√¥ng gian.",
        "Ch·∫•t li·ªáu r·∫ª ti·ªÅn, d·ªÖ h·ªèng sau th·ªùi gian ng·∫Øn.",
        "Kh√¥ng ƒë√°ng v·ªõi s·ªë ti·ªÅn b·ªè ra, kh√¥ng khuy·∫øn kh√≠ch mua."
    );

    // Category-specific comments
    private final List<String> laptopComments = Arrays.asList(
        "Laptop ch·∫°y m∆∞·ª£t, pin tr√¢u, ph√π h·ª£p cho c√¥ng vi·ªác v√† h·ªçc t·∫≠p.",
        "Thi·∫øt k·∫ø ƒë·∫πp, m√†n h√¨nh s·∫Øc n√©t, hi·ªáu nƒÉng gaming t·ªët.",
        "C·∫•u h√¨nh m·∫°nh, x·ª≠ l√Ω ƒëa nhi·ªám t·ªët, gi√° h·ª£p l√Ω.",
        "M√†n h√¨nh Full HD ƒë·∫πp, √¢m thanh t·ªët, webcam r√µ n√©t.",
        "Laptop nh·∫π, d·ªÖ mang theo, pin tr√¢u, ph√π h·ª£p sinh vi√™n."
    );

    private final List<String> cameraComments = Arrays.asList(
        "Camera ch·ª•p ·∫£nh s·∫Øc n√©t, video ·ªïn ƒë·ªãnh, d·ªÖ s·ª≠ d·ª•ng.",
        "Ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh t·ªët, zoom quang h·ªçc hi·ªáu qu·∫£.",
        "Thi·∫øt k·∫ø g·ªçn nh·∫π, ch·ªëng rung t·ªët, ph√π h·ª£p du l·ªãch.",
        "Camera an ninh ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, app d·ªÖ s·ª≠ d·ª•ng.",
        "Webcam ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p h·ªçp online v√† streaming."
    );

    private final List<String> componentComments = Arrays.asList(
        "Linh ki·ªán ch√≠nh h√£ng, hi·ªáu nƒÉng ·ªïn ƒë·ªãnh, t·∫£n nhi·ªát t·ªët.",
        "T·ªëc ƒë·ªô x·ª≠ l√Ω nhanh, t∆∞∆°ng th√≠ch t·ªët v·ªõi mainboard.",
        "RAM ch·∫°y ·ªïn ƒë·ªãnh, t·∫ßn s·ªë cao, ph√π h·ª£p gaming.",
        "SSD t·ªëc ƒë·ªô cao, kh·ªüi ƒë·ªông nhanh, kh√¥ng g√¢y ti·∫øng ·ªìn.",
        "PSU ·ªïn ƒë·ªãnh, ti·∫øt ki·ªám ƒëi·ªán, b·∫£o v·ªá t·ªët cho h·ªá th·ªëng."
    );

    public void generate(){
        if(reviewRepo.count() < 1){
            List<ReviewEntity> reviews = new ArrayList<>();
            List<OrderEntity> orders = orderRepo.findAll();
            
            System.out.println("üîÑ Generating reviews for " + orders.size() + " orders...");
            
            for (OrderEntity order : orders) {
                // Generate rating with realistic distribution (more positive ratings)
                int rating = generateRealisticRating();
                String comment = generateRealisticComment(order.getProduct().getName(), rating);
                
                ReviewEntity review = reviewMapping
                        .buildReviewBase(order.getUser(), order.getProduct(), rating, comment);
                reviews.add(review);
            }
            
            reviewRepo.saveAll(reviews);
            System.out.println("‚úÖ Generated " + reviews.size() + " reviews successfully");
        }
    }

    private int generateRealisticRating() {
        // Realistic rating distribution: 60% 4-5 stars, 30% 3 stars, 10% 1-2 stars
        int rand = random.nextInt(100);
        if (rand < 60) {
            return random.nextInt(2) + 4; // 4-5 stars
        } else if (rand < 90) {
            return 3; // 3 stars
        } else {
            return random.nextInt(2) + 1; // 1-2 stars
        }
    }

    private String generateRealisticComment(String productName, int rating) {
        String productNameLower = productName.toLowerCase();
        
        // Category-specific comments
        if (productNameLower.contains("laptop") || productNameLower.contains("pc") || 
            productNameLower.contains("macbook") || productNameLower.contains("thinkbook")) {
            return laptopComments.get(random.nextInt(laptopComments.size()));
        } else if (productNameLower.contains("camera") || productNameLower.contains("webcam") || 
                   productNameLower.contains("gopro") || productNameLower.contains("canon")) {
            return cameraComments.get(random.nextInt(cameraComments.size()));
        } else if (productNameLower.contains("cpu") || productNameLower.contains("ram") || 
                   productNameLower.contains("ssd") || productNameLower.contains("gpu") ||
                   productNameLower.contains("mainboard") || productNameLower.contains("psu")) {
            return componentComments.get(random.nextInt(componentComments.size()));
        }
        
        // General comments based on rating
        if (rating >= 4) {
            return positiveComments.get(random.nextInt(positiveComments.size()));
        } else if (rating == 3) {
            return neutralComments.get(random.nextInt(neutralComments.size()));
        } else {
            return negativeComments.get(random.nextInt(negativeComments.size()));
        }
    }
}
