package com.kma.shop.utils.generatedata;

import com.github.javafaker.Faker;
import com.kma.shop.entity.OrderEntity;
import com.kma.shop.entity.ProductEntity;
import com.kma.shop.entity.UserEntity;
import com.kma.shop.mapping.OrderMapping;
import com.kma.shop.repo.OrderRepo;
import com.kma.shop.repo.ProductRepo;
import com.kma.shop.repo.UserRepo;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

@Component
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class GenerateOrderData {
    OrderRepo orderRepo;
    OrderMapping orderMapping;
    UserRepo userRepo;
    ProductRepo productRepo;
    Faker faker;

    Random random = new Random();

    // Realistic order comments
    private final List<String> orderComments = Arrays.asList(
        "Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n nh√©!",
        "S·∫£n ph·∫©m ch√≠nh h√£ng, b·∫£o h√†nh ƒë·∫ßy ƒë·ªß.",
        "Giao v√†o gi·ªù h√†nh ch√≠nh, c·∫£m ∆°n shop!",
        "S·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£, r·∫•t h√†i l√≤ng.",
        "ƒê√≥ng g√≥i k·ªπ l∆∞·ª°ng, kh√¥ng b·ªã tr·∫ßy x∆∞·ªõc.",
        "Giao h√†ng ƒë√∫ng h·∫πn, nh√¢n vi√™n th√¢n thi·ªán.",
        "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, gi√° h·ª£p l√Ω.",
        "Giao v√†o bu·ªïi s√°ng, thu·∫≠n ti·ªán cho c√¥ng vi·ªác.",
        "ƒê√≥ng g√≥i ƒë·∫πp, s·∫£n ph·∫©m m·ªõi 100%.",
        "Giao h√†ng nhanh, s·∫£n ph·∫©m ƒë√∫ng nh∆∞ qu·∫£ng c√°o.",
        "C·∫£m ∆°n shop ƒë√£ t∆∞ v·∫•n nhi·ªát t√¨nh.",
        "S·∫£n ph·∫©m ƒë√∫ng th∆∞∆°ng hi·ªáu, y√™n t√¢m s·ª≠ d·ª•ng.",
        "Giao h√†ng ƒë√∫ng ƒë·ªãa ch·ªâ, nh√¢n vi√™n l·ªãch s·ª±.",
        "ƒê√≥ng g√≥i ch·∫Øc ch·∫Øn, kh√¥ng b·ªã h∆∞ h·ªèng.",
        "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao, ƒë√°ng mua!",
        "Giao h√†ng mi·ªÖn ph√≠, ti·∫øt ki·ªám chi ph√≠.",
        "S·∫£n ph·∫©m m·ªõi nh·∫•t, c√¥ng ngh·ªá ti√™n ti·∫øn.",
        "Giao h√†ng ƒë√∫ng gi·ªù, r·∫•t chuy√™n nghi·ªáp.",
        "ƒê√≥ng g√≥i g·ªçn g√†ng, d·ªÖ v·∫≠n chuy·ªÉn.",
        "S·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu s·ª≠ d·ª•ng."
    );

    // Special comments for different product types
    private final List<String> laptopOrderComments = Arrays.asList(
        "Laptop gaming c·∫•u h√¨nh m·∫°nh, ph√π h·ª£p ch∆°i game.",
        "Laptop vƒÉn ph√≤ng nh·∫π, pin tr√¢u, d·ªÖ mang theo.",
        "Laptop ƒë·ªì h·ªça m√†n h√¨nh ƒë·∫πp, x·ª≠ l√Ω t·ªët.",
        "Laptop sinh vi√™n gi√° h·ª£p l√Ω, ƒë·ªß d√πng cho h·ªçc t·∫≠p.",
        "Laptop doanh nh√¢n thi·∫øt k·∫ø sang tr·ªçng, b·∫£o m·∫≠t t·ªët."
    );

    private final List<String> cameraOrderComments = Arrays.asList(
        "Camera ch·ª•p ·∫£nh s·∫Øc n√©t, zoom quang h·ªçc t·ªët.",
        "Camera an ninh ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, app d·ªÖ s·ª≠ d·ª•ng.",
        "Webcam ch·∫•t l∆∞·ª£ng cao, ph√π h·ª£p h·ªçp online.",
        "Camera h√†nh tr√¨nh g·ªçn nh·∫π, ch·ªëng rung t·ªët.",
        "Camera chuy√™n nghi·ªáp, ph√π h·ª£p studio."
    );

    private final List<String> componentOrderComments = Arrays.asList(
        "Linh ki·ªán ch√≠nh h√£ng, t∆∞∆°ng th√≠ch t·ªët v·ªõi h·ªá th·ªëng.",
        "CPU hi·ªáu nƒÉng cao, t·∫£n nhi·ªát t·ªët.",
        "RAM t·ªëc ƒë·ªô cao, ph√π h·ª£p gaming v√† ƒë·ªì h·ªça.",
        "SSD kh·ªüi ƒë·ªông nhanh, l∆∞u tr·ªØ ·ªïn ƒë·ªãnh.",
        "GPU m·∫°nh m·∫Ω, ch∆°i game m∆∞·ª£t m√†."
    );

    public void generate(){
        if(orderRepo.count() < 1){
            List<UserEntity> users = userRepo.findAll();
            List<ProductEntity> products = productRepo.findAll();
            
            if (users.isEmpty() || products.isEmpty()) {
                System.out.println("‚ö†Ô∏è No users or products found. Skipping order generation.");
                return;
            }
            
            List<OrderEntity> orders = new ArrayList<>(800); // Reduced to 800 orders for better distribution
            
            System.out.println("üîÑ Generating orders for " + users.size() + " users and " + products.size() + " products...");
            
            // Generate orders with realistic distribution
            for(int i = 0; i < 800; i++){
                UserEntity user = users.get(random.nextInt(users.size()));
                ProductEntity product = products.get(random.nextInt(products.size()));
                
                // Generate realistic quantity (1-3 for most products, 1 for expensive items)
                int quantity = generateRealisticQuantity(product.getPrice());
                
                // Generate appropriate comment based on product type
                String comment = generateRealisticComment(product.getName());
                
                OrderEntity orderEntity = orderMapping
                        .buildOrderBase(user, product, quantity, comment);
                orders.add(orderEntity);
            }
            
            orderRepo.saveAll(orders);
            System.out.println("‚úÖ Generated " + orders.size() + " orders successfully");
        }
    }

    private int generateRealisticQuantity(float price) {
        // More expensive products have lower quantities
        if (price > 50000000) { // > 50M VND
            return 1;
        } else if (price > 20000000) { // > 20M VND
            return random.nextInt(2) + 1; // 1-2
        } else if (price > 10000000) { // > 10M VND
            return random.nextInt(3) + 1; // 1-3
        } else if (price > 5000000) { // > 5M VND
            return random.nextInt(4) + 1; // 1-4
        } else {
            return random.nextInt(5) + 1; // 1-5
        }
    }

    private String generateRealisticComment(String productName) {
        String productNameLower = productName.toLowerCase();
        
        // Category-specific comments
        if (productNameLower.contains("laptop") || productNameLower.contains("pc") || 
            productNameLower.contains("macbook") || productNameLower.contains("thinkbook")) {
            return laptopOrderComments.get(random.nextInt(laptopOrderComments.size()));
        } else if (productNameLower.contains("camera") || productNameLower.contains("webcam") || 
                   productNameLower.contains("gopro") || productNameLower.contains("canon")) {
            return cameraOrderComments.get(random.nextInt(cameraOrderComments.size()));
        } else if (productNameLower.contains("cpu") || productNameLower.contains("ram") || 
                   productNameLower.contains("ssd") || productNameLower.contains("gpu") ||
                   productNameLower.contains("mainboard") || productNameLower.contains("psu")) {
            return componentOrderComments.get(random.nextInt(componentOrderComments.size()));
        }
        
        // General comments
        return orderComments.get(random.nextInt(orderComments.size()));
    }
}
