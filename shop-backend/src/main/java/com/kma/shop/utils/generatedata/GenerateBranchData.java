package com.kma.shop.utils.generatedata;

import com.kma.shop.entity.BranchEntity;
import com.kma.shop.exception.AppException;
import com.kma.shop.service.interfaces.BranchService;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class GenerateBranchData {
    BranchService branchService;
    Random random = new Random();

    public GenerateBranchData(BranchService branchService) {
        this.branchService = branchService;
    }

    public void generate()  {
        if (branchService.count() < 1) {
            int numberOfBranches = random.nextInt(6) + 8; // Generate 8-13 branches
            System.out.println("üîÑ Generating " + numberOfBranches + " branches...");
            
            for (int i = 0; i < numberOfBranches; i++) {
                BranchEntity branch = buildBranch();
                branchService.save(branch);
            }
            
            System.out.println("‚úÖ Generated " + numberOfBranches + " branches successfully");
        }
    }

    private BranchEntity buildBranch() {
        String name = generateBranchName();
        String description = generateBranchDescription(name);

        return BranchEntity.builder()
                .name(name)
                .description(description)
                .categories(new ArrayList<>())
                .build();
    }

    // Realistic tech store branch names
    private final List<String> branchNames = Arrays.asList(
        // Major tech brands
        "Apple Store", "Samsung Experience Store", "Microsoft Store", "Dell Store", "HP Store",
        "Lenovo Store", "Asus Store", "Acer Store", "MSI Store", "Gigabyte Store",
        
        // Camera and photography brands
        "Canon Store", "Sony Store", "Nikon Store", "GoPro Store", "Fujifilm Store",
        
        // Component brands
        "Intel Store", "AMD Store", "NVIDIA Store", "Corsair Store", "Kingston Store",
        "G.Skill Store", "ASRock Store", "Cooler Master Store", "NZXT Store",
        
        // Vietnamese tech store chains
        "TechShop", "FPT Shop", "Th·∫ø Gi·ªõi Di ƒê·ªông", "ƒêi·ªán M√°y Xanh", "MediaMart",
        "Nguy·ªÖn Kim", "ƒêi·ªán M√°y Ch·ª£ L·ªõn", "Tran Anh Digital", "Phong V≈©", "An Ph√°t"
    );

    // Branch descriptions by type
    private final Map<String, String> branchDescriptions = Map.ofEntries(
        // Apple Store
        Map.entry("Apple Store", "C·ª≠a h√†ng ch√≠nh th·ª©c c·ªßa Apple t·∫°i Vi·ªát Nam. Chuy√™n cung c·∫•p iPhone, iPad, MacBook, Apple Watch v√† c√°c ph·ª• ki·ªán ch√≠nh h√£ng v·ªõi d·ªãch v·ª• b·∫£o h√†nh v√† h·ªó tr·ª£ t·ªëi ∆∞u."),
        
        // Samsung
        Map.entry("Samsung Experience Store", "Tr·∫£i nghi·ªám c√¥ng ngh·ªá Samsung v·ªõi ƒë·∫ßy ƒë·ªß s·∫£n ph·∫©m t·ª´ smartphone, tablet, laptop ƒë·∫øn TV v√† thi·∫øt b·ªã gia d·ª•ng th√¥ng minh."),
        
        // Microsoft
        Map.entry("Microsoft Store", "C·ª≠a h√†ng ch√≠nh th·ª©c Microsoft v·ªõi Surface, Xbox, Office v√† c√°c gi·∫£i ph√°p c√¥ng ngh·ªá doanh nghi·ªáp."),
        
        // Dell
        Map.entry("Dell Store", "Chuy√™n cung c·∫•p laptop, desktop, workstation v√† server Dell ch√≠nh h√£ng v·ªõi d·ªãch v·ª• b·∫£o h√†nh to√†n qu·ªëc."),
        
        // HP
        Map.entry("HP Store", "C·ª≠a h√†ng HP ch√≠nh th·ª©c v·ªõi ƒëa d·∫°ng laptop, m√°y in v√† gi·∫£i ph√°p c√¥ng ngh·ªá cho c√° nh√¢n v√† doanh nghi·ªáp."),
        
        // Lenovo
        Map.entry("Lenovo Store", "ThinkPad, IdeaPad v√† c√°c s·∫£n ph·∫©m Lenovo ch√≠nh h√£ng v·ªõi ch·∫•t l∆∞·ª£ng ƒë·∫≥ng c·∫•p th·∫ø gi·ªõi."),
        
        // Asus
        Map.entry("Asus Store", "ROG Gaming, ZenBook, VivoBook v√† c√°c s·∫£n ph·∫©m Asus cao c·∫•p cho gaming v√† c√¥ng vi·ªác."),
        
        // Acer
        Map.entry("Acer Store", "Predator Gaming, Swift, Aspire v√† c√°c laptop Acer ch·∫•t l∆∞·ª£ng cao v·ªõi gi√° c·∫£ h·ª£p l√Ω."),
        
        // MSI
        Map.entry("MSI Store", "Chuy√™n gaming laptop, desktop v√† linh ki·ªán MSI v·ªõi hi·ªáu nƒÉng ƒë·ªânh cao cho game th·ªß."),
        
        // Gigabyte
        Map.entry("Gigabyte Store", "AORUS Gaming, mainboard, VGA v√† c√°c linh ki·ªán Gigabyte ch·∫•t l∆∞·ª£ng cao."),
        
        // Camera brands
        Map.entry("Canon Store", "M√°y ·∫£nh DSLR, mirrorless, ·ªëng k√≠nh v√† ph·ª• ki·ªán Canon ch√≠nh h√£ng cho nhi·∫øp ·∫£nh gia."),
        Map.entry("Sony Store", "Alpha mirrorless, Cyber-shot v√† c√°c s·∫£n ph·∫©m Sony v·ªõi c√¥ng ngh·ªá c·∫£m bi·∫øn ti√™n ti·∫øn."),
        Map.entry("Nikon Store", "M√°y ·∫£nh DSLR, ·ªëng k√≠nh Nikkor v√† ph·ª• ki·ªán Nikon chuy√™n nghi·ªáp."),
        Map.entry("GoPro Store", "Camera h√†nh ƒë·ªông GoPro ch√≠nh h√£ng cho nh·ªØng cu·ªôc phi√™u l∆∞u v√† th·ªÉ thao m·∫°o hi·ªÉm."),
        Map.entry("Fujifilm Store", "X-Series, GFX v√† c√°c m√°y ·∫£nh Fujifilm v·ªõi ch·∫•t ·∫£nh ƒë·ªôc ƒë√°o v√† thi·∫øt k·∫ø retro."),
        
        // Component brands
        Map.entry("Intel Store", "CPU Intel Core, Xeon v√† c√°c gi·∫£i ph√°p x·ª≠ l√Ω hi·ªáu nƒÉng cao cho m·ªçi nhu c·∫ßu."),
        Map.entry("AMD Store", "Ryzen, EPYC v√† c√°c s·∫£n ph·∫©m AMD v·ªõi hi·ªáu nƒÉng v∆∞·ª£t tr·ªôi v√† gi√° c·∫£ c·∫°nh tranh."),
        Map.entry("NVIDIA Store", "GeForce RTX, Quadro v√† c√°c GPU NVIDIA v·ªõi c√¥ng ngh·ªá Ray Tracing ti√™n ti·∫øn."),
        Map.entry("Corsair Store", "RAM, PSU, cooling v√† ph·ª• ki·ªán gaming Corsair ch·∫•t l∆∞·ª£ng cao."),
        Map.entry("Kingston Store", "RAM, SSD Kingston ch√≠nh h√£ng v·ªõi ƒë·ªô tin c·∫≠y v√† hi·ªáu nƒÉng ·ªïn ƒë·ªãnh."),
        Map.entry("G.Skill Store", "RAM gaming G.Skill v·ªõi hi·ªáu nƒÉng cao v√† thi·∫øt k·∫ø RGB ƒë·∫πp m·∫Øt."),
        Map.entry("ASRock Store", "Mainboard ASRock ch·∫•t l∆∞·ª£ng cao v·ªõi gi√° c·∫£ h·ª£p l√Ω cho m·ªçi c·∫•u h√¨nh."),
        Map.entry("Cooler Master Store", "Case, cooling v√† ph·ª• ki·ªán Cooler Master cho h·ªá th·ªëng gaming."),
        Map.entry("NZXT Store", "Case, cooling NZXT v·ªõi thi·∫øt k·∫ø t·ªëi gi·∫£n v√† ch·∫•t l∆∞·ª£ng cao c·∫•p."),
        
        // Vietnamese chains
        Map.entry("TechShop", "Chu·ªói c·ª≠a h√†ng c√¥ng ngh·ªá h√†ng ƒë·∫ßu Vi·ªát Nam v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m v√† d·ªãch v·ª• chuy√™n nghi·ªáp."),
        Map.entry("FPT Shop", "H·ªá th·ªëng b√°n l·∫ª c√¥ng ngh·ªá FPT v·ªõi ƒë·∫ßy ƒë·ªß smartphone, laptop v√† thi·∫øt b·ªã s·ªë."),
        Map.entry("Th·∫ø Gi·ªõi Di ƒê·ªông", "Chu·ªói b√°n l·∫ª ƒëi·ªán tho·∫°i v√† thi·∫øt b·ªã s·ªë l·ªõn nh·∫•t Vi·ªát Nam v·ªõi gi√° c·∫£ c·∫°nh tranh."),
        Map.entry("ƒêi·ªán M√°y Xanh", "Chuy√™n cung c·∫•p ƒëi·ªán m√°y, ƒëi·ªán l·∫°nh v√† thi·∫øt b·ªã c√¥ng ngh·ªá v·ªõi d·ªãch v·ª• t·∫≠n t√¢m."),
        Map.entry("MediaMart", "Si√™u th·ªã ƒëi·ªán m√°y MediaMart v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m v√† ch√≠nh s√°ch b·∫£o h√†nh t·ªët."),
        Map.entry("Nguy·ªÖn Kim", "Chu·ªói si√™u th·ªã ƒëi·ªán m√°y Nguy·ªÖn Kim v·ªõi uy t√≠n v√† ch·∫•t l∆∞·ª£ng d·ªãch v·ª• h√†ng ƒë·∫ßu."),
        Map.entry("ƒêi·ªán M√°y Ch·ª£ L·ªõn", "Chuy√™n cung c·∫•p ƒëi·ªán m√°y, ƒëi·ªán l·∫°nh v·ªõi gi√° c·∫£ h·ª£p l√Ω v√† d·ªãch v·ª• t·ªët."),
        Map.entry("Tran Anh Digital", "C·ª≠a h√†ng c√¥ng ngh·ªá Tran Anh v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m v√† t∆∞ v·∫•n chuy√™n nghi·ªáp."),
        Map.entry("Phong V≈©", "Chu·ªói c·ª≠a h√†ng c√¥ng ngh·ªá Phong V≈© v·ªõi s·∫£n ph·∫©m ch√≠nh h√£ng v√† d·ªãch v·ª• t·ªët."),
        Map.entry("An Ph√°t", "C·ª≠a h√†ng linh ki·ªán m√°y t√≠nh An Ph√°t v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m v√† gi√° c·∫£ c·∫°nh tranh.")
    );

    private String generateBranchName() {
        return branchNames.get(random.nextInt(branchNames.size()));
    }

    private String generateBranchDescription(String branchName) {
        return branchDescriptions.getOrDefault(
            branchName,
            "C·ª≠a h√†ng c√¥ng ngh·ªá chuy√™n nghi·ªáp v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao, d·ªãch v·ª• t·∫≠n t√¢m v√† ch√≠nh s√°ch b·∫£o h√†nh t·ªët."
        );
    }
}