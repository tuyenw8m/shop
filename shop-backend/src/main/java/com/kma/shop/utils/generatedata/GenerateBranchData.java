package com.kma.shop.utils.generatedata;

import com.kma.shop.entity.BranchEntity;
import com.kma.shop.exception.AppException;
import com.kma.shop.service.interfaces.BranchService;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Component;

import java.util.*;

@Component
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class GenerateBranchData {
    BranchService branchService;
    Random random = new Random();

    public GenerateBranchData(BranchService branchService) {
        this.branchService = branchService;
    }

    public void generate()  {
        if (branchService.count() < 1) {
            int numberOfBranches = random.nextInt(6) + 8; // Generate 8-13 branches
            System.out.println("üîÑ Generating " + numberOfBranches + " product brands...");
            
            for (int i = 0; i < numberOfBranches; i++) {
                BranchEntity branch = buildBranch();
                branchService.save(branch);
            }
            
            System.out.println("‚úÖ Generated " + numberOfBranches + " product brands successfully");
        }
    }

    private BranchEntity buildBranch() {
        String name = generateBranchName();
        String description = generateBranchDescription(name);

        return BranchEntity.builder()
                .name(name)
                .description(description)
                .categories(new ArrayList<>())
                .build();
    }

    // Product brand names (not retail stores)
    private final List<String> brandNames = Arrays.asList(
        // Laptop and PC brands
        "MSI", "Lenovo", "Dell", "HP", "Asus", "Acer", "Apple", "Gigabyte", "Razer", "Alienware",
        
        // Camera and photography brands
        "Canon", "Sony", "Nikon", "GoPro", "Fujifilm", "Panasonic", "Olympus", "Leica", "DJI", "Insta360",
        
        // PC component brands
        "Intel", "AMD", "NVIDIA", "Corsair", "Kingston", "G.Skill", "ASRock", "Cooler Master", "NZXT", "Seagate",
        "Western Digital", "Samsung", "Crucial", "EVGA", "Thermaltake", "be quiet!", "Phanteks", "Lian Li",
        
        // Gaming and peripheral brands
        "Logitech", "SteelSeries", "HyperX", "ROCCAT", "Mad Catz", "Trust", "Creative", "Audio-Technica",
        
        // Network and storage brands
        "TP-Link", "ASUS", "Netgear", "D-Link", "Synology", "QNAP", "Buffalo", "LaCie"
    );

    // Brand descriptions by type
    private final Map<String, String> brandDescriptions = Map.ofEntries(
        // Laptop and PC brands
        Map.entry("MSI", "Th∆∞∆°ng hi·ªáu laptop gaming v√† bo m·∫°ch ch·ªß h√†ng ƒë·∫ßu th·∫ø gi·ªõi. Chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m gaming hi·ªáu nƒÉng cao v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† c√¥ng ngh·ªá ti√™n ti·∫øn."),
        Map.entry("Lenovo", "T·∫≠p ƒëo√†n c√¥ng ngh·ªá ƒëa qu·ªëc gia v·ªõi c√°c s·∫£n ph·∫©m ThinkPad, IdeaPad n·ªïi ti·∫øng. Chuy√™n v·ªÅ laptop doanh nh√¢n, gaming v√† thi·∫øt b·ªã di ƒë·ªông ch·∫•t l∆∞·ª£ng cao."),
        Map.entry("Dell", "Th∆∞∆°ng hi·ªáu m√°y t√≠nh h√†ng ƒë·∫ßu v·ªõi d√≤ng s·∫£n ph·∫©m ƒëa d·∫°ng t·ª´ laptop vƒÉn ph√≤ng ƒë·∫øn workstation chuy√™n nghi·ªáp. N·ªïi ti·∫øng v·ªõi d·ªãch v·ª• kh√°ch h√†ng xu·∫•t s·∫Øc."),
        Map.entry("HP", "Hewlett-Packard - th∆∞∆°ng hi·ªáu c√¥ng ngh·ªá l√¢u ƒë·ªùi v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m t·ª´ laptop, m√°y in ƒë·∫øn thi·∫øt b·ªã vƒÉn ph√≤ng. C√¢n b·∫±ng ho√†n h·∫£o gi·ªØa hi·ªáu nƒÉng v√† gi√° c·∫£."),
        Map.entry("Asus", "Th∆∞∆°ng hi·ªáu ƒê√†i Loan n·ªïi ti·∫øng v·ªõi ROG Gaming, ZenBook v√† c√°c s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao. Chuy√™n v·ªÅ laptop gaming, ultrabook v√† linh ki·ªán m√°y t√≠nh."),
        Map.entry("Acer", "Th∆∞∆°ng hi·ªáu laptop gi√° r·∫ª ch·∫•t l∆∞·ª£ng t·ªët v·ªõi d√≤ng Predator Gaming v√† Aspire. Ph√π h·ª£p cho h·ªçc sinh, sinh vi√™n v√† ng∆∞·ªùi d√πng ph·ªï th√¥ng."),
        Map.entry("Apple", "T·∫≠p ƒëo√†n c√¥ng ngh·ªá h√†ng ƒë·∫ßu v·ªõi h·ªá sinh th√°i kh√©p k√≠n. MacBook, iPhone, iPad v√† c√°c s·∫£n ph·∫©m cao c·∫•p v·ªõi thi·∫øt k·∫ø t·ªëi gi·∫£n v√† hi·ªáu nƒÉng v∆∞·ª£t tr·ªôi."),
        Map.entry("Gigabyte", "Th∆∞∆°ng hi·ªáu ƒê√†i Loan chuy√™n v·ªÅ mainboard, VGA v√† laptop gaming AORUS. N·ªïi ti·∫øng v·ªõi ch·∫•t l∆∞·ª£ng build v√† hi·ªáu nƒÉng ·ªïn ƒë·ªãnh."),
        Map.entry("Razer", "Th∆∞∆°ng hi·ªáu gaming chuy√™n nghi·ªáp v·ªõi laptop Blade, chu·ªôt, b√†n ph√≠m v√† ph·ª• ki·ªán gaming cao c·∫•p. Thi·∫øt k·∫ø ƒëen xanh ƒë·∫∑c tr∆∞ng."),
        Map.entry("Alienware", "Th∆∞∆°ng hi·ªáu gaming cao c·∫•p thu·ªôc Dell. Chuy√™n v·ªÅ laptop v√† desktop gaming v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† hi·ªáu nƒÉng ƒë·ªânh cao."),
        
        // Camera brands
        Map.entry("Canon", "Th∆∞∆°ng hi·ªáu m√°y ·∫£nh Nh·∫≠t B·∫£n h√†ng ƒë·∫ßu th·∫ø gi·ªõi. Chuy√™n v·ªÅ DSLR, mirrorless v√† ·ªëng k√≠nh ch·∫•t l∆∞·ª£ng cao cho nhi·∫øp ·∫£nh gia chuy√™n nghi·ªáp."),
        Map.entry("Sony", "T·∫≠p ƒëo√†n ƒëi·ªán t·ª≠ Nh·∫≠t B·∫£n v·ªõi d√≤ng Alpha mirrorless n·ªïi ti·∫øng. C√¥ng ngh·ªá c·∫£m bi·∫øn ti√™n ti·∫øn v√† video 4K ch·∫•t l∆∞·ª£ng cao."),
        Map.entry("Nikon", "Th∆∞∆°ng hi·ªáu m√°y ·∫£nh DSLR truy·ªÅn th·ªëng v·ªõi ·ªëng k√≠nh Nikkor ch·∫•t l∆∞·ª£ng cao. ƒê∆∞·ª£c ∆∞a chu·ªông b·ªüi nhi·∫øp ·∫£nh gia v√† nh√† b√°o."),
        Map.entry("GoPro", "Th∆∞∆°ng hi·ªáu camera h√†nh ƒë·ªông h√†ng ƒë·∫ßu th·∫ø gi·ªõi. Chuy√™n v·ªÅ camera nh·ªè g·ªçn, ch·ªëng n∆∞·ªõc cho th·ªÉ thao m·∫°o hi·ªÉm v√† du l·ªãch."),
        Map.entry("Fujifilm", "Th∆∞∆°ng hi·ªáu m√°y ·∫£nh v·ªõi ch·∫•t ·∫£nh ƒë·ªôc ƒë√°o v√† thi·∫øt k·∫ø retro. X-Series v√† GFX series ƒë∆∞·ª£c y√™u th√≠ch b·ªüi nhi·∫øp ·∫£nh gia."),
        Map.entry("Panasonic", "Th∆∞∆°ng hi·ªáu ƒëi·ªán t·ª≠ Nh·∫≠t B·∫£n v·ªõi Lumix series. Chuy√™n v·ªÅ camera mirrorless v√† video chuy√™n nghi·ªáp."),
        Map.entry("Olympus", "Th∆∞∆°ng hi·ªáu m√°y ·∫£nh v·ªõi OM-D series n·ªïi ti·∫øng. Thi·∫øt k·∫ø nh·ªè g·ªçn v√† ·ªïn ƒë·ªãnh h√¨nh ·∫£nh 5 tr·ª•c."),
        Map.entry("Leica", "Th∆∞∆°ng hi·ªáu m√°y ·∫£nh cao c·∫•p c·ªßa ƒê·ª©c. N·ªïi ti·∫øng v·ªõi ch·∫•t l∆∞·ª£ng quang h·ªçc xu·∫•t s·∫Øc v√† thi·∫øt k·∫ø sang tr·ªçng."),
        Map.entry("DJI", "Th∆∞∆°ng hi·ªáu drone v√† camera h√†ng ƒë·∫ßu th·∫ø gi·ªõi. Chuy√™n v·ªÅ thi·∫øt b·ªã bay v√† camera chuy√™n nghi·ªáp."),
        Map.entry("Insta360", "Th∆∞∆°ng hi·ªáu camera 360 ƒë·ªô v√† action cam m·ªõi n·ªïi. C√¥ng ngh·ªá ·ªïn ƒë·ªãnh h√¨nh ·∫£nh FlowState ƒë·ªôc ƒë√°o."),
        
        // PC component brands
        Map.entry("Intel", "T·∫≠p ƒëo√†n b√°n d·∫´n h√†ng ƒë·∫ßu th·∫ø gi·ªõi. Chuy√™n v·ªÅ CPU Core series, Xeon v√† c√°c gi·∫£i ph√°p x·ª≠ l√Ω hi·ªáu nƒÉng cao."),
        Map.entry("AMD", "Th∆∞∆°ng hi·ªáu CPU v√† GPU v·ªõi Ryzen, EPYC series. N·ªïi ti·∫øng v·ªõi hi·ªáu nƒÉng cao v√† gi√° c·∫£ c·∫°nh tranh."),
        Map.entry("NVIDIA", "Th∆∞∆°ng hi·ªáu GPU h√†ng ƒë·∫ßu v·ªõi GeForce RTX, Quadro series. C√¥ng ngh·ªá Ray Tracing v√† AI ti√™n ti·∫øn."),
        Map.entry("Corsair", "Th∆∞∆°ng hi·ªáu ph·ª• ki·ªán gaming v·ªõi RAM, PSU, cooling v√† b√†n ph√≠m c∆° ch·∫•t l∆∞·ª£ng cao."),
        Map.entry("Kingston", "Th∆∞∆°ng hi·ªáu b·ªô nh·ªõ v√† l∆∞u tr·ªØ v·ªõi RAM, SSD HyperX. ƒê·ªô tin c·∫≠y cao v√† hi·ªáu nƒÉng ·ªïn ƒë·ªãnh."),
        Map.entry("G.Skill", "Th∆∞∆°ng hi·ªáu RAM gaming v·ªõi hi·ªáu nƒÉng cao v√† thi·∫øt k·∫ø RGB ƒë·∫πp m·∫Øt. ƒê∆∞·ª£c y√™u th√≠ch b·ªüi game th·ªß."),
        Map.entry("ASRock", "Th∆∞∆°ng hi·ªáu mainboard v·ªõi gi√° c·∫£ h·ª£p l√Ω v√† ch·∫•t l∆∞·ª£ng t·ªët. Ph√π h·ª£p cho nhi·ªÅu c·∫•u h√¨nh kh√°c nhau."),
        Map.entry("Cooler Master", "Th∆∞∆°ng hi·ªáu cooling v√† case PC chuy√™n nghi·ªáp. Gi·∫£i ph√°p t·∫£n nhi·ªát hi·ªáu qu·∫£ cho gaming."),
        Map.entry("NZXT", "Th∆∞∆°ng hi·ªáu case v√† cooling v·ªõi thi·∫øt k·∫ø t·ªëi gi·∫£n, hi·ªán ƒë·∫°i. Ch·∫•t l∆∞·ª£ng cao c·∫•p cho build PC."),
        Map.entry("Seagate", "Th∆∞∆°ng hi·ªáu ·ªï c·ª©ng v√† SSD v·ªõi Barracuda, IronWolf series. Dung l∆∞·ª£ng l·ªõn v√† ƒë·ªô tin c·∫≠y cao."),
        Map.entry("Western Digital", "Th∆∞∆°ng hi·ªáu l∆∞u tr·ªØ v·ªõi WD Blue, Black, Red series. ƒêa d·∫°ng s·∫£n ph·∫©m cho m·ªçi nhu c·∫ßu."),
        Map.entry("Samsung", "T·∫≠p ƒëo√†n ƒëi·ªán t·ª≠ H√†n Qu·ªëc v·ªõi SSD 970 EVO, QVO series. T·ªëc ƒë·ªô cao v√† ƒë·ªô b·ªÅn t·ªët."),
        Map.entry("Crucial", "Th∆∞∆°ng hi·ªáu RAM v√† SSD c·ªßa Micron. Ch·∫•t l∆∞·ª£ng t·ªët v·ªõi gi√° c·∫£ c·∫°nh tranh."),
        Map.entry("EVGA", "Th∆∞∆°ng hi·ªáu GPU v√† PSU gaming v·ªõi ch·∫•t l∆∞·ª£ng cao v√† d·ªãch v·ª• kh√°ch h√†ng t·ªët."),
        Map.entry("Thermaltake", "Th∆∞∆°ng hi·ªáu case, cooling v√† PSU gaming. Thi·∫øt k·∫ø RGB ƒë·∫πp m·∫Øt v√† hi·ªáu nƒÉng t·ªët."),
        Map.entry("be quiet!", "Th∆∞∆°ng hi·ªáu cooling v√† PSU v·ªõi ti·∫øng ·ªìn th·∫•p. Chuy√™n v·ªÅ gi·∫£i ph√°p t·∫£n nhi·ªát y√™n tƒ©nh."),
        Map.entry("Phanteks", "Th∆∞∆°ng hi·ªáu case PC v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i v√† ch·∫•t l∆∞·ª£ng cao. Ph√π h·ª£p cho build PC cao c·∫•p."),
        Map.entry("Lian Li", "Th∆∞∆°ng hi·ªáu case PC cao c·∫•p v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† ch·∫•t li·ªáu nh√¥m cao c·∫•p."),
        
        // Gaming and peripheral brands
        Map.entry("Logitech", "Th∆∞∆°ng hi·ªáu chu·ªôt, b√†n ph√≠m v√† webcam h√†ng ƒë·∫ßu. Ch·∫•t l∆∞·ª£ng cao v√† thi·∫øt k·∫ø ergonomic."),
        Map.entry("SteelSeries", "Th∆∞∆°ng hi·ªáu gaming gear v·ªõi chu·ªôt, b√†n ph√≠m, tai nghe ch·∫•t l∆∞·ª£ng cao cho game th·ªß."),
        Map.entry("HyperX", "Th∆∞∆°ng hi·ªáu gaming gear c·ªßa Kingston. Tai nghe, b√†n ph√≠m v√† chu·ªôt gaming ch·∫•t l∆∞·ª£ng t·ªët."),
        Map.entry("ROCCAT", "Th∆∞∆°ng hi·ªáu gaming gear v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† c√¥ng ngh·ªá ti√™n ti·∫øn."),
        Map.entry("Mad Catz", "Th∆∞∆°ng hi·ªáu gaming gear v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o cho game th·ªß chuy√™n nghi·ªáp."),
        Map.entry("Trust", "Th∆∞∆°ng hi·ªáu ph·ª• ki·ªán m√°y t√≠nh v·ªõi gi√° c·∫£ h·ª£p l√Ω v√† ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh."),
        Map.entry("Creative", "Th∆∞∆°ng hi·ªáu √¢m thanh v·ªõi sound card v√† loa ch·∫•t l∆∞·ª£ng cao."),
        Map.entry("Audio-Technica", "Th∆∞∆°ng hi·ªáu tai nghe v√† microphone chuy√™n nghi·ªáp v·ªõi ch·∫•t l∆∞·ª£ng √¢m thanh xu·∫•t s·∫Øc."),
        
        // Network and storage brands
        Map.entry("TP-Link", "Th∆∞∆°ng hi·ªáu thi·∫øt b·ªã m·∫°ng v·ªõi router, switch ch·∫•t l∆∞·ª£ng t·ªët v√† gi√° c·∫£ h·ª£p l√Ω."),
        Map.entry("Netgear", "Th∆∞∆°ng hi·ªáu thi·∫øt b·ªã m·∫°ng cao c·∫•p v·ªõi router, switch chuy√™n nghi·ªáp."),
        Map.entry("D-Link", "Th∆∞∆°ng hi·ªáu thi·∫øt b·ªã m·∫°ng v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m cho gia ƒë√¨nh v√† doanh nghi·ªáp."),
        Map.entry("Synology", "Th∆∞∆°ng hi·ªáu NAS chuy√™n nghi·ªáp v·ªõi h·ªá ƒëi·ªÅu h√†nh DSM ti√™n ti·∫øn."),
        Map.entry("QNAP", "Th∆∞∆°ng hi·ªáu NAS v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m cho c√° nh√¢n v√† doanh nghi·ªáp."),
        Map.entry("Buffalo", "Th∆∞∆°ng hi·ªáu l∆∞u tr·ªØ v√† thi·∫øt b·ªã m·∫°ng v·ªõi ch·∫•t l∆∞·ª£ng Nh·∫≠t B·∫£n."),
        Map.entry("LaCie", "Th∆∞∆°ng hi·ªáu l∆∞u tr·ªØ cao c·∫•p v·ªõi thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† ch·∫•t l∆∞·ª£ng xu·∫•t s·∫Øc.")
    );

    private String generateBranchName() {
        return brandNames.get(random.nextInt(brandNames.size()));
    }

    private String generateBranchDescription(String brandName) {
        return brandDescriptions.getOrDefault(
            brandName,
            "Th∆∞∆°ng hi·ªáu c√¥ng ngh·ªá uy t√≠n v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao, ƒë∆∞·ª£c tin t∆∞·ªüng b·ªüi ng∆∞·ªùi d√πng tr√™n to√†n th·∫ø gi·ªõi."
        );
    }
}